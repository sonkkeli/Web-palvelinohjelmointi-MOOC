<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="weatherservice.WeatherServiceTest" time="6.664" tests="5" errors="3" skipped="0" failures="1">
  <properties>
    <property name="sun.desktop" value="windows"/>
    <property name="awt.toolkit" value="sun.awt.windows.WToolkit"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\sonja\NetBeansProjects\mooc-web-palvelinohjelmointi-java-19\osa07-Osa07_04.WeatherService\target\test-classes;C:\Users\sonja\NetBeansProjects\mooc-web-palvelinohjelmointi-java-19\osa07-Osa07_04.WeatherService\target\classes;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.1.3.RELEASE\spring-boot-starter-web-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter\2.1.3.RELEASE\spring-boot-starter-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.1.3.RELEASE\spring-boot-starter-logging-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\sonja\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\sonja\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.11.2\log4j-to-slf4j-2.11.2.jar;C:\Users\sonja\.m2\repository\org\apache\logging\log4j\log4j-api\2.11.2\log4j-api-2.11.2.jar;C:\Users\sonja\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\sonja\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\sonja\.m2\repository\org\yaml\snakeyaml\1.23\snakeyaml-1.23.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.1.3.RELEASE\spring-boot-starter-json-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.8\jackson-databind-2.9.8.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.0\jackson-annotations-2.9.0.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.8\jackson-core-2.9.8.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.8\jackson-datatype-jdk8-2.9.8.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.8\jackson-datatype-jsr310-2.9.8.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.8\jackson-module-parameter-names-2.9.8.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.1.3.RELEASE\spring-boot-starter-tomcat-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.16\tomcat-embed-core-9.0.16.jar;C:\Users\sonja\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\9.0.16\tomcat-embed-el-9.0.16.jar;C:\Users\sonja\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.16\tomcat-embed-websocket-9.0.16.jar;C:\Users\sonja\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.14.Final\hibernate-validator-6.0.14.Final.jar;C:\Users\sonja\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\sonja\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\sonja\.m2\repository\com\fasterxml\classmate\1.4.0\classmate-1.4.0.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-web\5.1.5.RELEASE\spring-web-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-beans\5.1.5.RELEASE\spring-beans-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-webmvc\5.1.5.RELEASE\spring-webmvc-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-aop\5.1.5.RELEASE\spring-aop-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-context\5.1.5.RELEASE\spring-context-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-expression\5.1.5.RELEASE\spring-expression-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-thymeleaf\2.1.3.RELEASE\spring-boot-starter-thymeleaf-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\thymeleaf\thymeleaf-spring5\3.0.11.RELEASE\thymeleaf-spring5-3.0.11.RELEASE.jar;C:\Users\sonja\.m2\repository\org\thymeleaf\thymeleaf\3.0.11.RELEASE\thymeleaf-3.0.11.RELEASE.jar;C:\Users\sonja\.m2\repository\org\attoparser\attoparser\2.0.5.RELEASE\attoparser-2.0.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\unbescape\unbescape\1.1.6.RELEASE\unbescape-1.1.6.RELEASE.jar;C:\Users\sonja\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\sonja\.m2\repository\org\thymeleaf\extras\thymeleaf-extras-java8time\3.0.3.RELEASE\thymeleaf-extras-java8time-3.0.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-devtools\2.1.3.RELEASE\spring-boot-devtools-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot\2.1.3.RELEASE\spring-boot-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.1.3.RELEASE\spring-boot-autoconfigure-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.1.3.RELEASE\spring-boot-starter-test-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-test\2.1.3.RELEASE\spring-boot-test-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.1.3.RELEASE\spring-boot-test-autoconfigure-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\sonja\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\sonja\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\sonja\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\sonja\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\sonja\.m2\repository\org\assertj\assertj-core\3.11.1\assertj-core-3.11.1.jar;C:\Users\sonja\.m2\repository\org\mockito\mockito-core\2.23.4\mockito-core-2.23.4.jar;C:\Users\sonja\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\sonja\.m2\repository\net\bytebuddy\byte-buddy-agent\1.9.10\byte-buddy-agent-1.9.10.jar;C:\Users\sonja\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\sonja\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\sonja\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\sonja\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\sonja\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-core\5.1.5.RELEASE\spring-core-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-jcl\5.1.5.RELEASE\spring-jcl-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-test\5.1.5.RELEASE\spring-test-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\xmlunit\xmlunit-core\2.6.2\xmlunit-core-2.6.2.jar;C:\Users\sonja\.m2\repository\org\projectlombok\lombok\1.18.6\lombok-1.18.6.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.1.3.RELEASE\spring-boot-starter-data-jpa-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.1.3.RELEASE\spring-boot-starter-aop-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\aspectj\aspectjweaver\1.9.2\aspectjweaver-1.9.2.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.1.3.RELEASE\spring-boot-starter-jdbc-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\com\zaxxer\HikariCP\3.2.0\HikariCP-3.2.0.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-jdbc\5.1.5.RELEASE\spring-jdbc-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\javax\transaction\javax.transaction-api\1.3\javax.transaction-api-1.3.jar;C:\Users\sonja\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\sonja\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\sonja\.m2\repository\org\hibernate\hibernate-core\5.3.7.Final\hibernate-core-5.3.7.Final.jar;C:\Users\sonja\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\sonja\.m2\repository\org\javassist\javassist\3.23.1-GA\javassist-3.23.1-GA.jar;C:\Users\sonja\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\sonja\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\sonja\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\sonja\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.4.Final\hibernate-commons-annotations-5.0.4.Final.jar;C:\Users\sonja\.m2\repository\org\springframework\data\spring-data-jpa\2.1.5.RELEASE\spring-data-jpa-2.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\data\spring-data-commons\2.1.5.RELEASE\spring-data-commons-2.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-orm\5.1.5.RELEASE\spring-orm-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-tx\5.1.5.RELEASE\spring-tx-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-aspects\5.1.5.RELEASE\spring-aspects-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\com\h2database\h2\1.4.197\h2-1.4.197.jar;C:\Users\sonja\.m2\repository\fi\helsinki\cs\tmc\edu-test-utils\0.4.2\edu-test-utils-0.4.2.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="user.timezone" value="Europe/Helsinki"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="os.name" value="Windows 10"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="FI"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk1.8.0_191\jre\bin"/>
    <property name="sun.java.command" value="C:\Users\sonja\AppData\Local\Temp\surefire2342779553909572450\surefirebooter4488014999099532167.jar C:\Users\sonja\AppData\Local\Temp\surefire2342779553909572450 2019-04-27T21-00-45_522-jvmRun1 surefire8492956719147928965tmp surefire_02461519053810805427tmp"/>
    <property name="surefire.test.class.path" value="C:\Users\sonja\NetBeansProjects\mooc-web-palvelinohjelmointi-java-19\osa07-Osa07_04.WeatherService\target\test-classes;C:\Users\sonja\NetBeansProjects\mooc-web-palvelinohjelmointi-java-19\osa07-Osa07_04.WeatherService\target\classes;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.1.3.RELEASE\spring-boot-starter-web-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter\2.1.3.RELEASE\spring-boot-starter-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.1.3.RELEASE\spring-boot-starter-logging-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\sonja\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\sonja\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.11.2\log4j-to-slf4j-2.11.2.jar;C:\Users\sonja\.m2\repository\org\apache\logging\log4j\log4j-api\2.11.2\log4j-api-2.11.2.jar;C:\Users\sonja\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\sonja\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\sonja\.m2\repository\org\yaml\snakeyaml\1.23\snakeyaml-1.23.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.1.3.RELEASE\spring-boot-starter-json-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.8\jackson-databind-2.9.8.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.0\jackson-annotations-2.9.0.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.8\jackson-core-2.9.8.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.8\jackson-datatype-jdk8-2.9.8.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.8\jackson-datatype-jsr310-2.9.8.jar;C:\Users\sonja\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.8\jackson-module-parameter-names-2.9.8.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.1.3.RELEASE\spring-boot-starter-tomcat-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.16\tomcat-embed-core-9.0.16.jar;C:\Users\sonja\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\9.0.16\tomcat-embed-el-9.0.16.jar;C:\Users\sonja\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.16\tomcat-embed-websocket-9.0.16.jar;C:\Users\sonja\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.14.Final\hibernate-validator-6.0.14.Final.jar;C:\Users\sonja\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\sonja\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\sonja\.m2\repository\com\fasterxml\classmate\1.4.0\classmate-1.4.0.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-web\5.1.5.RELEASE\spring-web-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-beans\5.1.5.RELEASE\spring-beans-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-webmvc\5.1.5.RELEASE\spring-webmvc-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-aop\5.1.5.RELEASE\spring-aop-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-context\5.1.5.RELEASE\spring-context-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-expression\5.1.5.RELEASE\spring-expression-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-thymeleaf\2.1.3.RELEASE\spring-boot-starter-thymeleaf-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\thymeleaf\thymeleaf-spring5\3.0.11.RELEASE\thymeleaf-spring5-3.0.11.RELEASE.jar;C:\Users\sonja\.m2\repository\org\thymeleaf\thymeleaf\3.0.11.RELEASE\thymeleaf-3.0.11.RELEASE.jar;C:\Users\sonja\.m2\repository\org\attoparser\attoparser\2.0.5.RELEASE\attoparser-2.0.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\unbescape\unbescape\1.1.6.RELEASE\unbescape-1.1.6.RELEASE.jar;C:\Users\sonja\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\sonja\.m2\repository\org\thymeleaf\extras\thymeleaf-extras-java8time\3.0.3.RELEASE\thymeleaf-extras-java8time-3.0.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-devtools\2.1.3.RELEASE\spring-boot-devtools-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot\2.1.3.RELEASE\spring-boot-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.1.3.RELEASE\spring-boot-autoconfigure-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.1.3.RELEASE\spring-boot-starter-test-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-test\2.1.3.RELEASE\spring-boot-test-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.1.3.RELEASE\spring-boot-test-autoconfigure-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\sonja\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\sonja\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\sonja\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\sonja\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\sonja\.m2\repository\org\assertj\assertj-core\3.11.1\assertj-core-3.11.1.jar;C:\Users\sonja\.m2\repository\org\mockito\mockito-core\2.23.4\mockito-core-2.23.4.jar;C:\Users\sonja\.m2\repository\net\bytebuddy\byte-buddy\1.9.10\byte-buddy-1.9.10.jar;C:\Users\sonja\.m2\repository\net\bytebuddy\byte-buddy-agent\1.9.10\byte-buddy-agent-1.9.10.jar;C:\Users\sonja\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\sonja\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\sonja\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\sonja\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\sonja\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-core\5.1.5.RELEASE\spring-core-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-jcl\5.1.5.RELEASE\spring-jcl-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-test\5.1.5.RELEASE\spring-test-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\xmlunit\xmlunit-core\2.6.2\xmlunit-core-2.6.2.jar;C:\Users\sonja\.m2\repository\org\projectlombok\lombok\1.18.6\lombok-1.18.6.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.1.3.RELEASE\spring-boot-starter-data-jpa-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.1.3.RELEASE\spring-boot-starter-aop-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\org\aspectj\aspectjweaver\1.9.2\aspectjweaver-1.9.2.jar;C:\Users\sonja\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.1.3.RELEASE\spring-boot-starter-jdbc-2.1.3.RELEASE.jar;C:\Users\sonja\.m2\repository\com\zaxxer\HikariCP\3.2.0\HikariCP-3.2.0.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-jdbc\5.1.5.RELEASE\spring-jdbc-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\javax\transaction\javax.transaction-api\1.3\javax.transaction-api-1.3.jar;C:\Users\sonja\.m2\repository\javax\xml\bind\jaxb-api\2.3.1\jaxb-api-2.3.1.jar;C:\Users\sonja\.m2\repository\javax\activation\javax.activation-api\1.2.0\javax.activation-api-1.2.0.jar;C:\Users\sonja\.m2\repository\org\hibernate\hibernate-core\5.3.7.Final\hibernate-core-5.3.7.Final.jar;C:\Users\sonja\.m2\repository\javax\persistence\javax.persistence-api\2.2\javax.persistence-api-2.2.jar;C:\Users\sonja\.m2\repository\org\javassist\javassist\3.23.1-GA\javassist-3.23.1-GA.jar;C:\Users\sonja\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\sonja\.m2\repository\org\jboss\jandex\2.0.5.Final\jandex-2.0.5.Final.jar;C:\Users\sonja\.m2\repository\org\dom4j\dom4j\2.1.1\dom4j-2.1.1.jar;C:\Users\sonja\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.4.Final\hibernate-commons-annotations-5.0.4.Final.jar;C:\Users\sonja\.m2\repository\org\springframework\data\spring-data-jpa\2.1.5.RELEASE\spring-data-jpa-2.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\data\spring-data-commons\2.1.5.RELEASE\spring-data-commons-2.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-orm\5.1.5.RELEASE\spring-orm-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-tx\5.1.5.RELEASE\spring-tx-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\org\springframework\spring-aspects\5.1.5.RELEASE\spring-aspects-5.1.5.RELEASE.jar;C:\Users\sonja\.m2\repository\com\h2database\h2\1.4.197\h2-1.4.197.jar;C:\Users\sonja\.m2\repository\fi\helsinki\cs\tmc\edu-test-utils\0.4.2\edu-test-utils-0.4.2.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\sonja"/>
    <property name="user.language" value="fi"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.home" value="C:\Program Files\Java\jdk1.8.0_191\jre"/>
    <property name="basedir" value="C:\Users\sonja\NetBeansProjects\mooc-web-palvelinohjelmointi-java-19\osa07-Osa07_04.WeatherService"/>
    <property name="file.separator" value="\"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/>
    <property name="surefire.real.class.path" value="C:\Users\sonja\AppData\Local\Temp\surefire2342779553909572450\surefirebooter4488014999099532167.jar"/>
    <property name="sun.boot.class.path" value="C:\Program Files\Java\jdk1.8.0_191\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_191\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_191\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_191\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_191\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_191\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_191\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_191\jre\classes"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="1.8.0_191-b12"/>
    <property name="user.name" value="sonja"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.endorsed.dirs" value="C:\Program Files\Java\jdk1.8.0_191\jre\lib\endorsed"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="maven.ext.class.path" value="C:\Program Files\tmcbeans\java\maven-nblib\netbeans-eventspy.jar"/>
    <property name="localRepository" value="C:\Users\sonja\.m2\repository"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\sonja\AppData\Local\Temp\"/>
    <property name="java.version" value="1.8.0_191"/>
    <property name="user.dir" value="C:\Users\sonja\NetBeansProjects\mooc-web-palvelinohjelmointi-java-19\osa07-Osa07_04.WeatherService"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk1.8.0_191\jre\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\iCLS\;C:\Program Files\Intel\Intel(R) Management Engine Components\iCLS\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\leJOS EV3\bin;C:\Program Files\nodejs\;C:\Program Files\PuTTY\;C:\Program Files\Git\cmd;C:\Users\sonja\AppData\Local\Microsoft\WindowsApps;C:\Users\sonja\AppData\Roaming\npm;C:\Program Files\JetBrains\PhpStorm 2018.3.5\bin;C:\Users\sonja\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\sonja\AppData\Local\GitHubDesktop\bin;."/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="25.191-b12"/>
    <property name="java.ext.dirs" value="C:\Program Files\Java\jdk1.8.0_191\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="52.0"/>
  </properties>
  <testcase name="testLocationsCacheEvictedOnAddLocation" classname="weatherservice.WeatherServiceTest" time="0.874">
    <failure type="java.lang.AssertionError">java.lang.AssertionError
	at weatherservice.WeatherServiceTest.testLocationsCacheEvictedOnAddLocation(WeatherServiceTest.java:125)
</failure>
    <system-out><![CDATA[21:00:46.391 [main] DEBUG org.springframework.test.context.junit4.SpringJUnit4ClassRunner - SpringJUnit4ClassRunner constructor called with [class weatherservice.WeatherServiceTest]
21:00:46.397 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
21:00:46.408 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
21:00:46.437 [main] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [weatherservice.WeatherServiceTest] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
21:00:46.451 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [weatherservice.WeatherServiceTest], using SpringBootContextLoader
21:00:46.455 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [weatherservice.WeatherServiceTest]: class path resource [weatherservice/WeatherServiceTest-context.xml] does not exist
21:00:46.455 [main] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [weatherservice.WeatherServiceTest]: class path resource [weatherservice/WeatherServiceTestContext.groovy] does not exist
21:00:46.455 [main] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [weatherservice.WeatherServiceTest]: no resource found for suffixes {-context.xml, Context.groovy}.
21:00:46.456 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [weatherservice.WeatherServiceTest]: WeatherServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
21:00:46.632 [main] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [C:\Users\sonja\NetBeansProjects\mooc-web-palvelinohjelmointi-java-19\osa07-Osa07_04.WeatherService\target\classes\weatherservice\WeatherServiceApplication.class]
21:00:46.634 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration weatherservice.WeatherServiceApplication for test class weatherservice.WeatherServiceTest
21:00:46.734 [main] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [weatherservice.WeatherServiceTest]: using defaults.
21:00:46.736 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
21:00:46.756 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@74e52ef6, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6ed3ccb2, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@1a677343, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@15de0b3c, org.springframework.test.context.support.DirtiesContextTestExecutionListener@489115ef, org.springframework.test.context.transaction.TransactionalTestExecutionListener@3857f613, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@198b6731, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@7c6908d7, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3c9754d8, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@3bf7ca37, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@79079097, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@4d1c00d0]
21:00:46.758 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [weatherservice.WeatherServiceTest]
21:00:46.759 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [weatherservice.WeatherServiceTest]
21:00:46.760 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [weatherservice.WeatherServiceTest]
21:00:46.760 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [weatherservice.WeatherServiceTest]
21:00:46.761 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [weatherservice.WeatherServiceTest]
21:00:46.761 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [weatherservice.WeatherServiceTest]
21:00:46.766 [main] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@4c178a76 testClass = WeatherServiceTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@fa4c865 testClass = WeatherServiceTest, locations = '{}', classes = '{class weatherservice.WeatherServiceApplication}', contextInitializerClasses = '[]', activeProfiles = '{test}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[[ImportsContextCustomizer@3bd82cf5 key = [org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@71623278, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@15b3e5b, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@1e4a7dd4, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@e7e8512, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@2a40cd94], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true]], class annotated with @DirtiesContext [false] with mode [null].
21:00:46.767 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [weatherservice.WeatherServiceTest]
21:00:46.767 [main] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [weatherservice.WeatherServiceTest]
21:00:46.800 [main] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=-1}

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.3.RELEASE)

2019-04-27 21:00:47.089  INFO 9636 --- [           main] weatherservice.WeatherServiceTest        : Starting WeatherServiceTest on LAPTOP-0AUPKKC1 with PID 9636 (started by sonja in C:\Users\sonja\NetBeansProjects\mooc-web-palvelinohjelmointi-java-19\osa07-Osa07_04.WeatherService)
2019-04-27 21:00:47.089  INFO 9636 --- [           main] weatherservice.WeatherServiceTest        : The following profiles are active: test
2019-04-27 21:00:47.902  INFO 9636 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2019-04-27 21:00:47.982  INFO 9636 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 72ms. Found 2 repository interfaces.
2019-04-27 21:00:48.407  INFO 9636 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e3967bee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-04-27 21:00:48.702  INFO 9636 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2019-04-27 21:00:48.903  INFO 9636 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2019-04-27 21:00:48.989  INFO 9636 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2019-04-27 21:00:49.064  INFO 9636 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.7.Final}
2019-04-27 21:00:49.065  INFO 9636 --- [           main] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2019-04-27 21:00:49.207  INFO 9636 --- [           main] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2019-04-27 21:00:49.489  INFO 9636 --- [           main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
Hibernate: create table location (id bigint not null, latitude double, longitude double, name varchar(255), primary key (id))
Hibernate: create table weather_entry (id bigint not null, chance_of_rain integer, degrees integer, target_date timestamp, location_id bigint, primary key (id))
Hibernate: create sequence hibernate_sequence start with 1 increment by 1
Hibernate: alter table weather_entry add constraint FK281esw9vit6o3s25gntjfouhx foreign key (location_id) references location
2019-04-27 21:00:50.290  INFO 9636 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2019-04-27 21:00:51.316  INFO 9636 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-04-27 21:00:51.371  WARN 9636 --- [           main] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2019-04-27 21:00:51.806  INFO 9636 --- [           main] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2019-04-27 21:00:51.807  INFO 9636 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2019-04-27 21:00:51.821  INFO 9636 --- [           main] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 14 ms
2019-04-27 21:00:51.846  INFO 9636 --- [           main] weatherservice.WeatherServiceTest        : Started WeatherServiceTest in 5.037 seconds (JVM running for 5.975)
2019-04-27 21:00:52.086  INFO 9636 --- [           main] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
Hibernate: select location0_.id as id1_0_, location0_.latitude as latitude2_0_, location0_.longitude as longitud3_0_, location0_.name as name4_0_ from location location0_
Hibernate: call next value for hibernate_sequence
Hibernate: insert into location (latitude, longitude, name, id) values (?, ?, ?, ?)
Hibernate: select location0_.id as id1_0_, location0_.latitude as latitude2_0_, location0_.longitude as longitud3_0_, location0_.name as name4_0_ from location location0_
Hibernate: select weatherent0_.location_id as location5_1_0_, weatherent0_.id as id1_1_0_, weatherent0_.id as id1_1_1_, weatherent0_.chance_of_rain as chance_o2_1_1_, weatherent0_.degrees as degrees3_1_1_, weatherent0_.location_id as location5_1_1_, weatherent0_.target_date as target_d4_1_1_ from weather_entry weatherent0_ where weatherent0_.location_id=?
Hibernate: call next value for hibernate_sequence
Hibernate: insert into location (latitude, longitude, name, id) values (?, ?, ?, ?)
Hibernate: call next value for hibernate_sequence
Hibernate: insert into location (latitude, longitude, name, id) values (?, ?, ?, ?)

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /locations
       Parameters = {name=[Bamboo Forest, Japan]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.add(weatherservice.Location)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = redirect:/locations
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 302
    Error message = null
          Headers = [Content-Language:"en", Location:"/locations"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = /locations
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testLocationsRetrievalCached" classname="weatherservice.WeatherServiceTest" time="0.053"/>
  <testcase name="testLocationCacheEvictedOnCacheFlush" classname="weatherservice.WeatherServiceTest" time="0.021">
    <error message="Request processing failed; nested exception is java.lang.IllegalArgumentException: Cannot find cache named &apos;location&apos; for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key=&apos;&apos; | keyGenerator=&apos;&apos; | cacheManager=&apos;&apos; | cacheResolver=&apos;&apos; | condition=&apos;&apos; | unless=&apos;&apos; | sync=&apos;false&apos;" type="org.springframework.web.util.NestedServletException">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: Cannot find cache named 'location' for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key='' | keyGenerator='' | cacheManager='' | cacheResolver='' | condition='' | unless='' | sync='false'
	at weatherservice.WeatherServiceTest.testLocationCacheEvictedOnCacheFlush(WeatherServiceTest.java:167)
Caused by: java.lang.IllegalArgumentException: Cannot find cache named 'location' for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key='' | keyGenerator='' | cacheManager='' | cacheResolver='' | condition='' | unless='' | sync='false'
	at weatherservice.WeatherServiceTest.testLocationCacheEvictedOnCacheFlush(WeatherServiceTest.java:167)
</error>
    <system-out><![CDATA[Hibernate: select location0_.id as id1_0_, location0_.latitude as latitude2_0_, location0_.longitude as longitud3_0_, location0_.name as name4_0_ from location location0_
Hibernate: select weatherent0_.location_id as location5_1_0_, weatherent0_.id as id1_1_0_, weatherent0_.id as id1_1_1_, weatherent0_.chance_of_rain as chance_o2_1_1_, weatherent0_.degrees as degrees3_1_1_, weatherent0_.location_id as location5_1_1_, weatherent0_.target_date as target_d4_1_1_ from weather_entry weatherent0_ where weatherent0_.location_id=?
Hibernate: select weatherent0_.location_id as location5_1_0_, weatherent0_.id as id1_1_0_, weatherent0_.id as id1_1_1_, weatherent0_.chance_of_rain as chance_o2_1_1_, weatherent0_.degrees as degrees3_1_1_, weatherent0_.location_id as location5_1_1_, weatherent0_.target_date as target_d4_1_1_ from weather_entry weatherent0_ where weatherent0_.location_id=?
Hibernate: delete from location where id=?
Hibernate: delete from location where id=?
Hibernate: call next value for hibernate_sequence
Hibernate: insert into location (latitude, longitude, name, id) values (?, ?, ?, ?)

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /locations
       Parameters = {name=[Bamboo Forest, Japan]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.add(weatherservice.Location)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = redirect:/locations
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 302
    Error message = null
          Headers = [Content-Language:"en", Location:"/locations"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = /locations
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testSingleLocationCached" classname="weatherservice.WeatherServiceTest" time="0.02">
    <error message="Request processing failed; nested exception is java.lang.IllegalArgumentException: Cannot find cache named &apos;location&apos; for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key=&apos;&apos; | keyGenerator=&apos;&apos; | cacheManager=&apos;&apos; | cacheResolver=&apos;&apos; | condition=&apos;&apos; | unless=&apos;&apos; | sync=&apos;false&apos;" type="org.springframework.web.util.NestedServletException">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: Cannot find cache named 'location' for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key='' | keyGenerator='' | cacheManager='' | cacheResolver='' | condition='' | unless='' | sync='false'
	at weatherservice.WeatherServiceTest.testSingleLocationCached(WeatherServiceTest.java:79)
Caused by: java.lang.IllegalArgumentException: Cannot find cache named 'location' for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key='' | keyGenerator='' | cacheManager='' | cacheResolver='' | condition='' | unless='' | sync='false'
	at weatherservice.WeatherServiceTest.testSingleLocationCached(WeatherServiceTest.java:79)
</error>
    <system-out><![CDATA[Hibernate: select location0_.id as id1_0_, location0_.latitude as latitude2_0_, location0_.longitude as longitud3_0_, location0_.name as name4_0_ from location location0_
Hibernate: select weatherent0_.location_id as location5_1_0_, weatherent0_.id as id1_1_0_, weatherent0_.id as id1_1_1_, weatherent0_.chance_of_rain as chance_o2_1_1_, weatherent0_.degrees as degrees3_1_1_, weatherent0_.location_id as location5_1_1_, weatherent0_.target_date as target_d4_1_1_ from weather_entry weatherent0_ where weatherent0_.location_id=?
Hibernate: delete from location where id=?
Hibernate: call next value for hibernate_sequence
Hibernate: insert into location (latitude, longitude, name, id) values (?, ?, ?, ?)

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /locations
       Parameters = {name=[Bamboo Forest, Japan]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.add(weatherservice.Location)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = redirect:/locations
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 302
    Error message = null
          Headers = [Content-Language:"en", Location:"/locations"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = /locations
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="testLocationCacheEvictedOnAddLocation" classname="weatherservice.WeatherServiceTest" time="0.016">
    <error message="Request processing failed; nested exception is java.lang.IllegalArgumentException: Cannot find cache named &apos;location&apos; for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key=&apos;&apos; | keyGenerator=&apos;&apos; | cacheManager=&apos;&apos; | cacheResolver=&apos;&apos; | condition=&apos;&apos; | unless=&apos;&apos; | sync=&apos;false&apos;" type="org.springframework.web.util.NestedServletException">org.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.IllegalArgumentException: Cannot find cache named 'location' for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key='' | keyGenerator='' | cacheManager='' | cacheResolver='' | condition='' | unless='' | sync='false'
	at weatherservice.WeatherServiceTest.testLocationCacheEvictedOnAddLocation(WeatherServiceTest.java:137)
Caused by: java.lang.IllegalArgumentException: Cannot find cache named 'location' for Builder[public weatherservice.Location weatherservice.LocationService.getOneLocationById(java.lang.Long)] caches=[location] | key='' | keyGenerator='' | cacheManager='' | cacheResolver='' | condition='' | unless='' | sync='false'
	at weatherservice.WeatherServiceTest.testLocationCacheEvictedOnAddLocation(WeatherServiceTest.java:137)
</error>
    <system-out><![CDATA[Hibernate: select location0_.id as id1_0_, location0_.latitude as latitude2_0_, location0_.longitude as longitud3_0_, location0_.name as name4_0_ from location location0_
Hibernate: select weatherent0_.location_id as location5_1_0_, weatherent0_.id as id1_1_0_, weatherent0_.id as id1_1_1_, weatherent0_.chance_of_rain as chance_o2_1_1_, weatherent0_.degrees as degrees3_1_1_, weatherent0_.location_id as location5_1_1_, weatherent0_.target_date as target_d4_1_1_ from weather_entry weatherent0_ where weatherent0_.location_id=?
Hibernate: delete from location where id=?
Hibernate: call next value for hibernate_sequence
Hibernate: insert into location (latitude, longitude, name, id) values (?, ?, ?, ?)

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /locations
       Parameters = {name=[Bamboo Forest, Japan]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.add(weatherservice.Location)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = redirect:/locations
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 302
    Error message = null
          Headers = [Content-Language:"en", Location:"/locations"]
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = /locations
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /locations
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = weatherservice.LocationController
           Method = public java.lang.String weatherservice.LocationController.list(org.springframework.ui.Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = locations
             View = null
        Attribute = locations
            value = [Location(name=kumpula, latitude=null, longitude=null, weatherEntries=[]), Location(name=oomp-pula, latitude=null, longitude=null, weatherEntries=[]), Location(name=Bamboo Forest, Japan, latitude=null, longitude=null, weatherEntries=[])]

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head lang="en">
        <meta charset="UTF-8" />
        <title>Lorem ipsum</title>
    </head>
    <body>

        <h3>Locations</h3>
        <ul>
            <li><a href="/locations/1">kumpula</a></li>
            <li><a href="/locations/2">oomp-pula</a></li>
            <li><a href="/locations/3">Bamboo Forest, Japan</a></li>
        </ul>

        <div>

            <h3>Add a new location:</h3>

            <form action="/locations" method="POST">
                <p>Location name:</p>
                <input type="text" name="name"/>
                <p>Latitude (e.g. 60.204474)</p>
                <input type="text" name="latitude" value="60.204474"/>
                <p>Longitude (e.g. 24.962289)</p>
                <input type="text" name="longitude" value="24.962289"/>
                <p>&nbsp;</p>
                <input type="submit" value="Add location"/>            
            </form>
        </div>
    </body>
</html>

    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
</testsuite>